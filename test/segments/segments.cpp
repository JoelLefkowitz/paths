#include "../../src/segments.hpp"
#include "../../src/convert.hpp"
#include <gtest/gtest.h>
#include <string>
#include <vector>

TEST(segments, segments) {
    GTEST_SKIP();

    struct TestCase {
        std::string              path;
        std::vector<std::string> expected;
    };

    std::vector<TestCase> cases = {
        {"",          {"."}              },
        {".",         {"."}              },
        {"..",        {".."}             },
        {"a",         {"a"}              },
        {"/",         {"", ""}           },
        {"/.",        {"", ""}           },
        {"/..",       {"", ""}           },
        {"/a",        {"", "a"}          },
        {"./",        {"."}              },
        {"./.",       {"."}              },
        {"./..",      {".."}             },
        {"./a",       {"a"}              },
        {"../",       {".."}             },
        {"../.",      {".."}             },
        {"../..",     {"..", ".."}       },
        {"../a",      {"..", "a"}        },
        {"a/",        {"a"}              },
        {"a/.",       {"a"}              },
        {"a/..",      {"."}              },
        {"a/b",       {"a", "b"}         },
        {"//",        {"", "", ""}       },
        {"//.",       {"", "", ""}       },
        {"//..",      {"", "", ""}       },
        {"//a",       {"", "", "a"}      },
        {"/./",       {"", ""}           },
        {"/./.",      {"", ""}           },
        {"/./..",     {"", ""}           },
        {"/./a",      {"", "a"}          },
        {"/../",      {"", ""}           },
        {"/../.",     {"", ""}           },
        {"/../..",    {"", ""}           },
        {"/../a",     {"", "a"}          },
        {"/a/",       {"", "a"}          },
        {"/a/.",      {"", "a"}          },
        {"/a/..",     {"", ""}           },
        {"/a/b",      {"", "a", "b"}     },
        {".//",       {"."}              },
        {".//.",      {"."}              },
        {".//..",     {".."}             },
        {".//a",      {"a"}              },
        {"././",      {"."}              },
        {"././.",     {"."}              },
        {"././..",    {".."}             },
        {"././a",     {"a"}              },
        {"./../",     {".."}             },
        {"./../.",    {".."}             },
        {"./../..",   {"..", ".."}       },
        {"./../a",    {"..", "a"}        },
        {"./a/",      {"a"}              },
        {"./a/.",     {"a"}              },
        {"./a/..",    {"."}              },
        {"./a/b",     {"a", "b"}         },
        {"..//",      {".."}             },
        {"..//.",     {".."}             },
        {"..//..",    {"..", ".."}       },
        {"..//a",     {"..", "a"}        },
        {".././",     {".."}             },
        {".././.",    {".."}             },
        {".././..",   {"..", ".."}       },
        {".././a",    {"..", "a"}        },
        {"../../",    {"..", ".."}       },
        {"../../.",   {"..", ".."}       },
        {"../../..",  {"..", "..", ".."} },
        {"../../a",   {"..", "..", "a"}  },
        {"../a/",     {"..", "a"}        },
        {"../a/.",    {"..", "a"}        },
        {"../a/..",   {".."}             },
        {"../a/b",    {"..", "a", "b"}   },
        {"a//",       {"a"}              },
        {"a//.",      {"a"}              },
        {"a//..",     {"."}              },
        {"a//b",      {"a", "b"}         },
        {"a/./",      {"a"}              },
        {"a/./.",     {"a"}              },
        {"a/./..",    {"."}              },
        {"a/./b",     {"a", "b"}         },
        {"a/../",     {"."}              },
        {"a/../.",    {"."}              },
        {"a/../..",   {".."}             },
        {"a/../b",    {"b"}              },
        {"a/b/",      {"a", "b"}         },
        {"a/b/.",     {"a", "b"}         },
        {"a/b/..",    {"a"}              },
        {"a/b/c",     {"a", "b", "c"}    },
        {"/a/b/c",    {"a", "b", "c"}    },
        {"C:/a/b/c",  {"a", "b", "c"}    },
        {"a/b/c.ext", {"a", "b", "c.ext"}},
    };

    for (auto test : cases) {
        test.path = paths::platform_path(test.path);
        EXPECT_EQ(paths::segments(test.path), test.expected);
    }
}
