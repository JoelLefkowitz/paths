#include "../../src/detect.hpp"
#include "../../src/paths.hpp"
#include <gtest/gtest.h>
#include <string>
#include <vector>

TEST(Paths_Paths, segments) {
    GTEST_SKIP();

    struct TestCase {
        std::string              path;
        std::vector<std::string> expected;
    };

    std::vector<TestCase> cases = {
        {"",         {"."}             },
        {" ",        {" "}             },
        {".",        {"."}             },
        {"..",       {".."}            },
        {"a",        {"a"}             },
        {"/",        {"", ""}          },
        {"/ ",       {"", " "}         },
        {"/.",       {"", ""}          },
        {"/..",      {"", ""}          },
        {"/a",       {"", "a"}         },
        {" /",       {" "}             },
        {" / ",      {" ", " "}        },
        {" /.",      {" "}             },
        {" /..",     {"."}             },
        {" /a",      {" ", "a"}        },
        {"./",       {"."}             },
        {"./ ",      {" "}             },
        {"./.",      {"."}             },
        {"./..",     {".."}            },
        {"./a",      {"a"}             },
        {"../",      {".."}            },
        {"../ ",     {"..", " "}       },
        {"../.",     {".."}            },
        {"../..",    {"..", ".."}      },
        {"../a",     {"..", "a"}       },
        {"a/",       {"a"}             },
        {"a/ ",      {"a", " "}        },
        {"a/.",      {"a"}             },
        {"a/..",     {"."}             },
        {"a/a",      {"a", "a"}        },
        {"//",       {"", "", ""}      },
        {"// ",      {"", "", " "}     },
        {"//.",      {"", "", ""}      },
        {"//..",     {"", "", ""}      },
        {"//a",      {"", "", "a"}     },
        {"/ /",      {"", " "}         },
        {"/ / ",     {"", " ", " "}    },
        {"/ /.",     {"", " "}         },
        {"/ /..",    {"", ""}          },
        {"/ /a",     {"", " ", "a"}    },
        {"/./",      {"", ""}          },
        {"/./ ",     {"", " "}         },
        {"/./.",     {"", ""}          },
        {"/./..",    {"", ""}          },
        {"/./a",     {"", "a"}         },
        {"/../",     {"", ""}          },
        {"/../ ",    {"", " "}         },
        {"/../.",    {"", ""}          },
        {"/../..",   {"", ""}          },
        {"/../a",    {"", "a"}         },
        {"/a/",      {"", "a"}         },
        {"/a/ ",     {"", "a", " "}    },
        {"/a/.",     {"", "a"}         },
        {"/a/..",    {"", ""}          },
        {"/a/a",     {"", "a", "a"}    },
        {" //",      {" "}             },
        {" // ",     {" ", " "}        },
        {" //.",     {" "}             },
        {" //..",    {"."}             },
        {" //a",     {" ", "a"}        },
        {" / /",     {" ", " "}        },
        {" / / ",    {" ", " ", " "}   },
        {" / /.",    {" ", " "}        },
        {" / /..",   {" "}             },
        {" / /a",    {" ", " ", "a"}   },
        {" /./",     {" "}             },
        {" /./ ",    {" ", " "}        },
        {" /./.",    {" "}             },
        {" /./..",   {"."}             },
        {" /./a",    {" ", "a"}        },
        {" /../",    {"."}             },
        {" /../ ",   {" "}             },
        {" /../.",   {"."}             },
        {" /../..",  {".."}            },
        {" /../a",   {"a"}             },
        {" /a/",     {" ", "a"}        },
        {" /a/ ",    {" ", "a", " "}   },
        {" /a/.",    {" ", "a"}        },
        {" /a/..",   {" "}             },
        {" /a/a",    {" ", "a", "a"}   },
        {".//",      {"."}             },
        {".// ",     {" "}             },
        {".//.",     {"."}             },
        {".//..",    {".."}            },
        {".//a",     {"a"}             },
        {"./ /",     {" "}             },
        {"./ / ",    {" ", " "}        },
        {"./ /.",    {" "}             },
        {"./ /..",   {"."}             },
        {"./ /a",    {" ", "a"}        },
        {"././",     {"."}             },
        {"././ ",    {" "}             },
        {"././.",    {"."}             },
        {"././..",   {".."}            },
        {"././a",    {"a"}             },
        {"./../",    {".."}            },
        {"./../ ",   {"..", " "}       },
        {"./../.",   {".."}            },
        {"./../..",  {"..", ".."}      },
        {"./../a",   {"..", "a"}       },
        {"./a/",     {"a"}             },
        {"./a/ ",    {"a", " "}        },
        {"./a/.",    {"a"}             },
        {"./a/..",   {"."}             },
        {"./a/a",    {"a", "a"}        },
        {"..//",     {".."}            },
        {"..// ",    {"..", " "}       },
        {"..//.",    {".."}            },
        {"..//..",   {"..", ".."}      },
        {"..//a",    {"..", "a"}       },
        {"../ /",    {"..", " "}       },
        {"../ / ",   {"..", " ", " "}  },
        {"../ /.",   {"..", " "}       },
        {"../ /..",  {".."}            },
        {"../ /a",   {"..", " ", "a"}  },
        {".././",    {".."}            },
        {".././ ",   {"..", " "}       },
        {".././.",   {".."}            },
        {".././..",  {"..", ".."}      },
        {".././a",   {"..", "a"}       },
        {"../../",   {"..", ".."}      },
        {"../../ ",  {"..", "..", " "} },
        {"../../.",  {"..", ".."}      },
        {"../../..", {"..", "..", ".."}},
        {"../../a",  {"..", "..", "a"} },
        {"../a/",    {"..", "a"}       },
        {"../a/ ",   {"..", "a", " "}  },
        {"../a/.",   {"..", "a"}       },
        {"../a/..",  {".."}            },
        {"../a/a",   {"..", "a", "a"}  },
        {"a//",      {"a"}             },
        {"a// ",     {"a", " "}        },
        {"a//.",     {"a"}             },
        {"a//..",    {"."}             },
        {"a//a",     {"a", "a"}        },
        {"a/ /",     {"a", " "}        },
        {"a/ / ",    {"a", " ", " "}   },
        {"a/ /.",    {"a", " "}        },
        {"a/ /..",   {"a"}             },
        {"a/ /a",    {"a", " ", "a"}   },
        {"a/./",     {"a"}             },
        {"a/./ ",    {"a", " "}        },
        {"a/./.",    {"a"}             },
        {"a/./..",   {"."}             },
        {"a/./a",    {"a", "a"}        },
        {"a/../",    {"."}             },
        {"a/../ ",   {" "}             },
        {"a/../.",   {"."}             },
        {"a/../..",  {".."}            },
        {"a/../a",   {"a"}             },
        {"a/a/",     {"a", "a"}        },
        {"a/a/ ",    {"a", "a", " "}   },
        {"a/a/.",    {"a", "a"}        },
        {"a/a/..",   {"a"}             },
        {"a/a/a",    {"a", "a", "a"}   },
    };

    for (auto test : cases) {
        if (platform::sep == paths::windows_sep) {
            test.path = paths::windows_path(test.path);
        }

        EXPECT_EQ(paths::segments(test.path), test.expected);
    }
}
