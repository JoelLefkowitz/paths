#include "../../src/chunks.hpp"
#include <gtest/gtest.h>
#include <string>
#include <vector>

TEST(chunks, split) {
    struct TestCase {
        std::string              str;
        std::string              delimiter;
        std::vector<std::string> expected;
    };

    std::vector<TestCase> cases = {
        {"",         "",  {""}              },
        {" ",        "",  {" "}             },
        {".",        "",  {"."}             },
        {"..",       "",  {".."}            },
        {"a",        "",  {"a"}             },
        {"",         "/", {""}              },
        {" ",        "/", {" "}             },
        {".",        "/", {"."}             },
        {"..",       "/", {".."}            },
        {"a",        "/", {"a"}             },
        {"/",        "/", {"", ""}          },
        {"/ ",       "/", {"", " "}         },
        {"/.",       "/", {"", "."}         },
        {"/..",      "/", {"", ".."}        },
        {"/a",       "/", {"", "a"}         },
        {" /",       "/", {" ", ""}         },
        {" / ",      "/", {" ", " "}        },
        {" /.",      "/", {" ", "."}        },
        {" /..",     "/", {" ", ".."}       },
        {" /a",      "/", {" ", "a"}        },
        {"./",       "/", {".", ""}         },
        {"./ ",      "/", {".", " "}        },
        {"./.",      "/", {".", "."}        },
        {"./..",     "/", {".", ".."}       },
        {"./a",      "/", {".", "a"}        },
        {"../",      "/", {"..", ""}        },
        {"../ ",     "/", {"..", " "}       },
        {"../.",     "/", {"..", "."}       },
        {"../..",    "/", {"..", ".."}      },
        {"../a",     "/", {"..", "a"}       },
        {"a/",       "/", {"a", ""}         },
        {"a/ ",      "/", {"a", " "}        },
        {"a/.",      "/", {"a", "."}        },
        {"a/..",     "/", {"a", ".."}       },
        {"a/a",      "/", {"a", "a"}        },
        {"//",       "/", {"", "", ""}      },
        {"// ",      "/", {"", "", " "}     },
        {"//.",      "/", {"", "", "."}     },
        {"//..",     "/", {"", "", ".."}    },
        {"//a",      "/", {"", "", "a"}     },
        {"/ /",      "/", {"", " ", ""}     },
        {"/ / ",     "/", {"", " ", " "}    },
        {"/ /.",     "/", {"", " ", "."}    },
        {"/ /..",    "/", {"", " ", ".."}   },
        {"/ /a",     "/", {"", " ", "a"}    },
        {"/./",      "/", {"", ".", ""}     },
        {"/./ ",     "/", {"", ".", " "}    },
        {"/./.",     "/", {"", ".", "."}    },
        {"/./..",    "/", {"", ".", ".."}   },
        {"/./a",     "/", {"", ".", "a"}    },
        {"/../",     "/", {"", "..", ""}    },
        {"/../ ",    "/", {"", "..", " "}   },
        {"/../.",    "/", {"", "..", "."}   },
        {"/../..",   "/", {"", "..", ".."}  },
        {"/../a",    "/", {"", "..", "a"}   },
        {"/a/",      "/", {"", "a", ""}     },
        {"/a/ ",     "/", {"", "a", " "}    },
        {"/a/.",     "/", {"", "a", "."}    },
        {"/a/..",    "/", {"", "a", ".."}   },
        {"/a/a",     "/", {"", "a", "a"}    },
        {" //",      "/", {" ", "", ""}     },
        {" // ",     "/", {" ", "", " "}    },
        {" //.",     "/", {" ", "", "."}    },
        {" //..",    "/", {" ", "", ".."}   },
        {" //a",     "/", {" ", "", "a"}    },
        {" / /",     "/", {" ", " ", ""}    },
        {" / / ",    "/", {" ", " ", " "}   },
        {" / /.",    "/", {" ", " ", "."}   },
        {" / /..",   "/", {" ", " ", ".."}  },
        {" / /a",    "/", {" ", " ", "a"}   },
        {" /./",     "/", {" ", ".", ""}    },
        {" /./ ",    "/", {" ", ".", " "}   },
        {" /./.",    "/", {" ", ".", "."}   },
        {" /./..",   "/", {" ", ".", ".."}  },
        {" /./a",    "/", {" ", ".", "a"}   },
        {" /../",    "/", {" ", "..", ""}   },
        {" /../ ",   "/", {" ", "..", " "}  },
        {" /../.",   "/", {" ", "..", "."}  },
        {" /../..",  "/", {" ", "..", ".."} },
        {" /../a",   "/", {" ", "..", "a"}  },
        {" /a/",     "/", {" ", "a", ""}    },
        {" /a/ ",    "/", {" ", "a", " "}   },
        {" /a/.",    "/", {" ", "a", "."}   },
        {" /a/..",   "/", {" ", "a", ".."}  },
        {" /a/a",    "/", {" ", "a", "a"}   },
        {".//",      "/", {".", "", ""}     },
        {".// ",     "/", {".", "", " "}    },
        {".//.",     "/", {".", "", "."}    },
        {".//..",    "/", {".", "", ".."}   },
        {".//a",     "/", {".", "", "a"}    },
        {"./ /",     "/", {".", " ", ""}    },
        {"./ / ",    "/", {".", " ", " "}   },
        {"./ /.",    "/", {".", " ", "."}   },
        {"./ /..",   "/", {".", " ", ".."}  },
        {"./ /a",    "/", {".", " ", "a"}   },
        {"././",     "/", {".", ".", ""}    },
        {"././ ",    "/", {".", ".", " "}   },
        {"././.",    "/", {".", ".", "."}   },
        {"././..",   "/", {".", ".", ".."}  },
        {"././a",    "/", {".", ".", "a"}   },
        {"./../",    "/", {".", "..", ""}   },
        {"./../ ",   "/", {".", "..", " "}  },
        {"./../.",   "/", {".", "..", "."}  },
        {"./../..",  "/", {".", "..", ".."} },
        {"./../a",   "/", {".", "..", "a"}  },
        {"./a/",     "/", {".", "a", ""}    },
        {"./a/ ",    "/", {".", "a", " "}   },
        {"./a/.",    "/", {".", "a", "."}   },
        {"./a/..",   "/", {".", "a", ".."}  },
        {"./a/a",    "/", {".", "a", "a"}   },
        {"..//",     "/", {"..", "", ""}    },
        {"..// ",    "/", {"..", "", " "}   },
        {"..//.",    "/", {"..", "", "."}   },
        {"..//..",   "/", {"..", "", ".."}  },
        {"..//a",    "/", {"..", "", "a"}   },
        {"../ /",    "/", {"..", " ", ""}   },
        {"../ / ",   "/", {"..", " ", " "}  },
        {"../ /.",   "/", {"..", " ", "."}  },
        {"../ /..",  "/", {"..", " ", ".."} },
        {"../ /a",   "/", {"..", " ", "a"}  },
        {".././",    "/", {"..", ".", ""}   },
        {".././ ",   "/", {"..", ".", " "}  },
        {".././.",   "/", {"..", ".", "."}  },
        {".././..",  "/", {"..", ".", ".."} },
        {".././a",   "/", {"..", ".", "a"}  },
        {"../../",   "/", {"..", "..", ""}  },
        {"../../ ",  "/", {"..", "..", " "} },
        {"../../.",  "/", {"..", "..", "."} },
        {"../../..", "/", {"..", "..", ".."}},
        {"../../a",  "/", {"..", "..", "a"} },
        {"../a/",    "/", {"..", "a", ""}   },
        {"../a/ ",   "/", {"..", "a", " "}  },
        {"../a/.",   "/", {"..", "a", "."}  },
        {"../a/..",  "/", {"..", "a", ".."} },
        {"../a/a",   "/", {"..", "a", "a"}  },
        {"a//",      "/", {"a", "", ""}     },
        {"a// ",     "/", {"a", "", " "}    },
        {"a//.",     "/", {"a", "", "."}    },
        {"a//..",    "/", {"a", "", ".."}   },
        {"a//a",     "/", {"a", "", "a"}    },
        {"a/ /",     "/", {"a", " ", ""}    },
        {"a/ / ",    "/", {"a", " ", " "}   },
        {"a/ /.",    "/", {"a", " ", "."}   },
        {"a/ /..",   "/", {"a", " ", ".."}  },
        {"a/ /a",    "/", {"a", " ", "a"}   },
        {"a/./",     "/", {"a", ".", ""}    },
        {"a/./ ",    "/", {"a", ".", " "}   },
        {"a/./.",    "/", {"a", ".", "."}   },
        {"a/./..",   "/", {"a", ".", ".."}  },
        {"a/./a",    "/", {"a", ".", "a"}   },
        {"a/../",    "/", {"a", "..", ""}   },
        {"a/../ ",   "/", {"a", "..", " "}  },
        {"a/../.",   "/", {"a", "..", "."}  },
        {"a/../..",  "/", {"a", "..", ".."} },
        {"a/../a",   "/", {"a", "..", "a"}  },
        {"a/a/",     "/", {"a", "a", ""}    },
        {"a/a/ ",    "/", {"a", "a", " "}   },
        {"a/a/.",    "/", {"a", "a", "."}   },
        {"a/a/..",   "/", {"a", "a", ".."}  },
        {"a/a/a",    "/", {"a", "a", "a"}   },
    };

    for (const auto test : cases) {
        EXPECT_EQ(paths::split(test.str, test.delimiter), test.expected);
    }
}
