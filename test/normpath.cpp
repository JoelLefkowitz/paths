#include "../src/detect.hpp"
#include "../src/paths.hpp"
#include <algorithm>
#include <gtest/gtest.h>
#include <string>
#include <vector>

TEST(Paths_Paths, normpath) {
    GTEST_SKIP();

    struct TestCase {
        std::string path;
        std::string expected;
    };

    std::vector<TestCase> cases = {
        {"",         "."       },
        {" ",        " "       },
        {".",        "."       },
        {"..",       ".."      },
        {"a",        "a"       },
        {"/",        "/"       },
        {"/ ",       "/ "      },
        {"/.",       "/"       },
        {"/..",      "/"       },
        {"/a",       "/a"      },
        {" /",       " "       },
        {" / ",      " / "     },
        {" /.",      " "       },
        {" /..",     "."       },
        {" /a",      " /a"     },
        {"./",       "."       },
        {"./ ",      " "       },
        {"./.",      "."       },
        {"./..",     ".."      },
        {"./a",      "a"       },
        {"../",      ".."      },
        {"../ ",     "../ "    },
        {"../.",     ".."      },
        {"../..",    "../.."   },
        {"../a",     "../a"    },
        {"a/",       "a"       },
        {"a/ ",      "a/ "     },
        {"a/.",      "a"       },
        {"a/..",     "."       },
        {"a/a",      "a/a"     },
        {"//",       "//"      },
        {"// ",      "// "     },
        {"//.",      "//"      },
        {"//..",     "//"      },
        {"//a",      "//a"     },
        {"/ /",      "/ "      },
        {"/ / ",     "/ / "    },
        {"/ /.",     "/ "      },
        {"/ /..",    "/"       },
        {"/ /a",     "/ /a"    },
        {"/./",      "/"       },
        {"/./ ",     "/ "      },
        {"/./.",     "/"       },
        {"/./..",    "/"       },
        {"/./a",     "/a"      },
        {"/../",     "/"       },
        {"/../ ",    "/ "      },
        {"/../.",    "/"       },
        {"/../..",   "/"       },
        {"/../a",    "/a"      },
        {"/a/",      "/a"      },
        {"/a/ ",     "/a/ "    },
        {"/a/.",     "/a"      },
        {"/a/..",    "/"       },
        {"/a/a",     "/a/a"    },
        {" //",      " "       },
        {" // ",     " / "     },
        {" //.",     " "       },
        {" //..",    "."       },
        {" //a",     " /a"     },
        {" / /",     " / "     },
        {" / / ",    " / / "   },
        {" / /.",    " / "     },
        {" / /..",   " "       },
        {" / /a",    " / /a"   },
        {" /./",     " "       },
        {" /./ ",    " / "     },
        {" /./.",    " "       },
        {" /./..",   "."       },
        {" /./a",    " /a"     },
        {" /../",    "."       },
        {" /../ ",   " "       },
        {" /../.",   "."       },
        {" /../..",  ".."      },
        {" /../a",   "a"       },
        {" /a/",     " /a"     },
        {" /a/ ",    " /a/ "   },
        {" /a/.",    " /a"     },
        {" /a/..",   " "       },
        {" /a/a",    " /a/a"   },
        {".//",      "."       },
        {".// ",     " "       },
        {".//.",     "."       },
        {".//..",    ".."      },
        {".//a",     "a"       },
        {"./ /",     " "       },
        {"./ / ",    " / "     },
        {"./ /.",    " "       },
        {"./ /..",   "."       },
        {"./ /a",    " /a"     },
        {"././",     "."       },
        {"././ ",    " "       },
        {"././.",    "."       },
        {"././..",   ".."      },
        {"././a",    "a"       },
        {"./../",    ".."      },
        {"./../ ",   "../ "    },
        {"./../.",   ".."      },
        {"./../..",  "../.."   },
        {"./../a",   "../a"    },
        {"./a/",     "a"       },
        {"./a/ ",    "a/ "     },
        {"./a/.",    "a"       },
        {"./a/..",   "."       },
        {"./a/a",    "a/a"     },
        {"..//",     ".."      },
        {"..// ",    "../ "    },
        {"..//.",    ".."      },
        {"..//..",   "../.."   },
        {"..//a",    "../a"    },
        {"../ /",    "../ "    },
        {"../ / ",   "../ / "  },
        {"../ /.",   "../ "    },
        {"../ /..",  ".."      },
        {"../ /a",   "../ /a"  },
        {".././",    ".."      },
        {".././ ",   "../ "    },
        {".././.",   ".."      },
        {".././..",  "../.."   },
        {".././a",   "../a"    },
        {"../../",   "../.."   },
        {"../../ ",  "../../ " },
        {"../../.",  "../.."   },
        {"../../..", "../../.."},
        {"../../a",  "../../a" },
        {"../a/",    "../a"    },
        {"../a/ ",   "../a/ "  },
        {"../a/.",   "../a"    },
        {"../a/..",  ".."      },
        {"../a/a",   "../a/a"  },
        {"a//",      "a"       },
        {"a// ",     "a/ "     },
        {"a//.",     "a"       },
        {"a//..",    "."       },
        {"a//a",     "a/a"     },
        {"a/ /",     "a/ "     },
        {"a/ / ",    "a/ / "   },
        {"a/ /.",    "a/ "     },
        {"a/ /..",   "a"       },
        {"a/ /a",    "a/ /a"   },
        {"a/./",     "a"       },
        {"a/./ ",    "a/ "     },
        {"a/./.",    "a"       },
        {"a/./..",   "."       },
        {"a/./a",    "a/a"     },
        {"a/../",    "."       },
        {"a/../ ",   " "       },
        {"a/../.",   "."       },
        {"a/../..",  ".."      },
        {"a/../a",   "a"       },
        {"a/a/",     "a/a"     },
        {"a/a/ ",    "a/a/ "   },
        {"a/a/.",    "a/a"     },
        {"a/a/..",   "a"       },
        {"a/a/a",    "a/a/a"   },
    };

    for (const auto test : cases) {
        if (platform::sep == '\\') {
            std::replace(test.path.begin(), test.path.end(), "/", "\\");
            std::replace(test.expected.begin(), test.expected.end(), "/", "\\");
        }

        EXPECT_EQ(paths::normpath(test.path), test.expected);
    }
};
