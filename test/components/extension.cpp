#include "../../src/components.hpp"
#include "../../src/convert.hpp"
#include <gtest/gtest.h>
#include <string>
#include <vector>

TEST(components, extension) {
    GTEST_SKIP();

    struct TestCase {
        std::string path;
        std::string expected;
    };

    std::vector<TestCase> cases = {
        {".",               ""          },
        {"..",              ""          },
        {"a",               ""          },
        {"/",               ""          },
        {"/.",              ""          },
        {"/..",             ""          },
        {"/a",              ""          },
        {"./",              ""          },
        {"./.",             ""          },
        {"./..",            ""          },
        {"./a",             ""          },
        {"../",             ""          },
        {"../.",            ""          },
        {"../..",           ""          },
        {"../a",            ""          },
        {"a/",              ""          },
        {"a/.",             ""          },
        {"a/..",            ""          },
        {"a/b",             ""          },
        {"//",              ""          },
        {"//.",             ""          },
        {"//..",            ""          },
        {"//a",             ""          },
        {"/./",             ""          },
        {"/./.",            ""          },
        {"/./..",           ""          },
        {"/./a",            ""          },
        {"/../",            ""          },
        {"/../.",           ""          },
        {"/../..",          ""          },
        {"/../a",           ""          },
        {"/a/",             ""          },
        {"/a/.",            ""          },
        {"/a/..",           ""          },
        {"/a/b",            ""          },
        {".//",             ""          },
        {".//.",            ""          },
        {".//..",           ""          },
        {".//a",            ""          },
        {"././",            ""          },
        {"././.",           ""          },
        {"././..",          ""          },
        {"././a",           ""          },
        {"./../",           ""          },
        {"./../.",          ""          },
        {"./../..",         ""          },
        {"./../a",          ""          },
        {"./a/",            ""          },
        {"./a/.",           ""          },
        {"./a/..",          ""          },
        {"./a/b",           ""          },
        {"..//",            ""          },
        {"..//.",           ""          },
        {"..//..",          ""          },
        {"..//a",           ""          },
        {".././",           ""          },
        {".././.",          ""          },
        {".././..",         ""          },
        {".././a",          ""          },
        {"../../",          ""          },
        {"../../.",         ""          },
        {"../../..",        ""          },
        {"../../a",         ""          },
        {"../a/",           ""          },
        {"../a/.",          ""          },
        {"../a/..",         ""          },
        {"../a/b",          ""          },
        {"a//",             ""          },
        {"a//.",            ""          },
        {"a//..",           ""          },
        {"a//b",            ""          },
        {"a/./",            ""          },
        {"a/./.",           ""          },
        {"a/./..",          ""          },
        {"a/./b",           ""          },
        {"a/../",           ""          },
        {"a/../.",          ""          },
        {"a/../..",         ""          },
        {"a/../b",          ""          },
        {"a/b/",            ""          },
        {"a/b/.",           ""          },
        {"a/b/..",          ""          },
        {"a/b/c",           ""          },
        {"C:/a/b/c",        ""          },
        {"a/b/c.ext",       ".ext"      },
        {"a/b/c.ext1.ext2", ".ext1.ext2"},
    };

    for (auto test : cases) {
        test.path     = paths::platform_path(test.path);
        test.expected = paths::platform_path(test.expected);
        EXPECT_EQ(paths::extension(test.path), test.expected);
    }
}
