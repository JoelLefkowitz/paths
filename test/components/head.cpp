#include "../../src/components.hpp"
#include "../../src/convert.hpp"
#include <gtest/gtest.h>
#include <string>

TEST(components, head) {
    GTEST_SKIP();

    struct TestCase {
        std::string path;
        std::string expected;
    };

    std::vector<TestCase> cases = {
        {"",         "." },
        {" ",        " " },
        {".",        "." },
        {"..",       ".."},
        {"a",        "a" },
        {"/",        ""  },
        {"/ ",       " " },
        {"/.",       ""  },
        {"/..",      ""  },
        {"/a",       "a" },
        {" /",       " " },
        {" / ",      " " },
        {" /.",      " " },
        {" /..",     "." },
        {" /a",      "a" },
        {"./",       "." },
        {"./ ",      " " },
        {"./.",      "." },
        {"./..",     ".."},
        {"./a",      "a" },
        {"../",      ".."},
        {"../ ",     " " },
        {"../.",     ".."},
        {"../..",    ".."},
        {"../a",     "a" },
        {"a/",       "a" },
        {"a/ ",      " " },
        {"a/.",      "a" },
        {"a/..",     "." },
        {"a/a",      "a" },
        {"//",       ""  },
        {"// ",      " " },
        {"//.",      ""  },
        {"//..",     ""  },
        {"//a",      "a" },
        {"/ /",      " " },
        {"/ / ",     " " },
        {"/ /.",     " " },
        {"/ /..",    ""  },
        {"/ /a",     "a" },
        {"/./",      ""  },
        {"/./ ",     " " },
        {"/./.",     ""  },
        {"/./..",    ""  },
        {"/./a",     "a" },
        {"/../",     ""  },
        {"/../ ",    " " },
        {"/../.",    ""  },
        {"/../..",   ""  },
        {"/../a",    "a" },
        {"/a/",      "a" },
        {"/a/ ",     " " },
        {"/a/.",     "a" },
        {"/a/..",    ""  },
        {"/a/a",     "a" },
        {" //",      " " },
        {" // ",     " " },
        {" //.",     " " },
        {" //..",    "." },
        {" //a",     "a" },
        {" / /",     " " },
        {" / / ",    " " },
        {" / /.",    " " },
        {" / /..",   " " },
        {" / /a",    "a" },
        {" /./",     " " },
        {" /./ ",    " " },
        {" /./.",    " " },
        {" /./..",   "." },
        {" /./a",    "a" },
        {" /../",    "." },
        {" /../ ",   " " },
        {" /../.",   "." },
        {" /../..",  ".."},
        {" /../a",   "a" },
        {" /a/",     "a" },
        {" /a/ ",    " " },
        {" /a/.",    "a" },
        {" /a/..",   " " },
        {" /a/a",    "a" },
        {".//",      "." },
        {".// ",     " " },
        {".//.",     "." },
        {".//..",    ".."},
        {".//a",     "a" },
        {"./ /",     " " },
        {"./ / ",    " " },
        {"./ /.",    " " },
        {"./ /..",   "." },
        {"./ /a",    "a" },
        {"././",     "." },
        {"././ ",    " " },
        {"././.",    "." },
        {"././..",   ".."},
        {"././a",    "a" },
        {"./../",    ".."},
        {"./../ ",   " " },
        {"./../.",   ".."},
        {"./../..",  ".."},
        {"./../a",   "a" },
        {"./a/",     "a" },
        {"./a/ ",    " " },
        {"./a/.",    "a" },
        {"./a/..",   "." },
        {"./a/a",    "a" },
        {"..//",     ".."},
        {"..// ",    " " },
        {"..//.",    ".."},
        {"..//..",   ".."},
        {"..//a",    "a" },
        {"../ /",    " " },
        {"../ / ",   " " },
        {"../ /.",   " " },
        {"../ /..",  ".."},
        {"../ /a",   "a" },
        {".././",    ".."},
        {".././ ",   " " },
        {".././.",   ".."},
        {".././..",  ".."},
        {".././a",   "a" },
        {"../../",   ".."},
        {"../../ ",  " " },
        {"../../.",  ".."},
        {"../../..", ".."},
        {"../../a",  "a" },
        {"../a/",    "a" },
        {"../a/ ",   " " },
        {"../a/.",   "a" },
        {"../a/..",  ".."},
        {"../a/a",   "a" },
        {"a//",      "a" },
        {"a// ",     " " },
        {"a//.",     "a" },
        {"a//..",    "." },
        {"a//a",     "a" },
        {"a/ /",     " " },
        {"a/ / ",    " " },
        {"a/ /.",    " " },
        {"a/ /..",   "a" },
        {"a/ /a",    "a" },
        {"a/./",     "a" },
        {"a/./ ",    " " },
        {"a/./.",    "a" },
        {"a/./..",   "." },
        {"a/./a",    "a" },
        {"a/../",    "." },
        {"a/../ ",   " " },
        {"a/../.",   "." },
        {"a/../..",  ".."},
        {"a/../a",   "a" },
        {"a/a/",     "a" },
        {"a/a/ ",    " " },
        {"a/a/.",    "a" },
        {"a/a/..",   "a" },
        {"a/a/a",    "a" },
    };

    for (auto test : cases) {
        test.path = paths::platform_path(test.path);
        EXPECT_EQ(paths::head(test.path), test.expected);
    }
}
