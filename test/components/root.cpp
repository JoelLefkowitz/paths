#include "../../src/components.hpp"
#include "../../src/convert.hpp"
#include <gtest/gtest.h>
#include <string>

TEST(components, root) {
    GTEST_SKIP();

    struct TestCase {
        std::string path;
        std::string expected;
    };

    std::vector<TestCase> cases = {
        {".",               "." },
        {"..",              ".."},
        {"a",               "a" },
        {"/",               ""  },
        {"/.",              "." },
        {"/..",             ".."},
        {"/a",              "a" },
        {"./",              ""  },
        {"./.",             "." },
        {"./..",            ".."},
        {"./a",             "a" },
        {"../",             ""  },
        {"../.",            "." },
        {"../..",           ".."},
        {"../a",            "a" },
        {"a/",              ""  },
        {"a/.",             "." },
        {"a/..",            ".."},
        {"a/b",             "b" },
        {"//",              ""  },
        {"//.",             "." },
        {"//..",            ".."},
        {"//a",             "a" },
        {"/./",             ""  },
        {"/./.",            "." },
        {"/./..",           ".."},
        {"/./a",            "a" },
        {"/../",            ""  },
        {"/../.",           "." },
        {"/../..",          ".."},
        {"/../a",           "a" },
        {"/a/",             ""  },
        {"/a/.",            "." },
        {"/a/..",           ".."},
        {"/a/b",            "b" },
        {".//",             ""  },
        {".//.",            "." },
        {".//..",           ".."},
        {".//a",            "a" },
        {"././",            ""  },
        {"././.",           "." },
        {"././..",          ".."},
        {"././a",           "a" },
        {"./../",           ""  },
        {"./../.",          "." },
        {"./../..",         ".."},
        {"./../a",          "a" },
        {"./a/",            ""  },
        {"./a/.",           "." },
        {"./a/..",          ".."},
        {"./a/b",           "b" },
        {"..//",            ""  },
        {"..//.",           "." },
        {"..//..",          ".."},
        {"..//a",           "a" },
        {".././",           ""  },
        {".././.",          "." },
        {".././..",         ".."},
        {".././a",          "a" },
        {"../../",          ""  },
        {"../../.",         "." },
        {"../../..",        ".."},
        {"../../a",         "a" },
        {"../a/",           ""  },
        {"../a/.",          "." },
        {"../a/..",         ".."},
        {"../a/b",          "b" },
        {"a//",             ""  },
        {"a//.",            "." },
        {"a//..",           ".."},
        {"a//b",            "b" },
        {"a/./",            ""  },
        {"a/./.",           "." },
        {"a/./..",          ".."},
        {"a/./b",           "b" },
        {"a/../",           ""  },
        {"a/../.",          "." },
        {"a/../..",         ".."},
        {"a/../b",          "b" },
        {"a/b/",            ""  },
        {"a/b/.",           "." },
        {"a/b/..",          ".."},
        {"a/b/c",           "c" },
        {"C:/a/b/c",        "c" },
        {"a/b/c.ext",       "c" },
        {"a/b/c.ext1.ext2", "c" },
    };

    for (auto test : cases) {
        test.path     = paths::platform_path(test.path);
        test.expected = paths::platform_path(test.expected);
        EXPECT_EQ(paths::root(test.path), test.expected);
    }
}
