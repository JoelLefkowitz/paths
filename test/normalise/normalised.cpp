#include "../../src/convert.hpp"
#include "../../src/normalise.hpp"
#include <gtest/gtest.h>
#include <string>
#include <vector>

TEST(normalise, normalised) {
    GTEST_SKIP();

    std::vector<std::string> true_cases = {
        ".",        "..",       "a",           "/",          "/a",
        "../..",    "../a",     "a/b",         "//",         "//a",
        "/a/b",     "../../..", "../../a",     "../a/b",     "a/b/c",
        "//a/b",    "/a/b/c",   "../../../..", "../../../a", "../../a/b",
        "../a/b/c", "a/b/c/d",  "C:/a/b/c",    "a/b/c.ext",
    };

    std::vector<std::string> false_cases = {
        "",           "/.",         "/..",        "./",          "./.",
        "./..",       "./a",        "../",        "../.",        "a/",
        "a/.",        "a/..",       "//.",        "//..",        "/./",
        "/./.",       "/./..",      "/./a",       "/../",        "/../.",
        "/../..",     "/../a",      "/a/",        "/a/.",        "/a/..",
        ".//",        ".//.",       ".//..",      ".//a",        "././",
        "././.",      "././..",     "././a",      "./../",       "./../.",
        "./../..",    "./../a",     "./a/",       "./a/.",       "./a/..",
        "./a/b",      "..//",       "..//.",      "..//..",      "..//a",
        ".././",      ".././.",     ".././..",    ".././a",      "../../",
        "../../.",    "../a/",      "../a/.",     "../a/..",     "a//",
        "a//.",       "a//..",      "a//b",       "a/./",        "a/./.",
        "a/./..",     "a/./b",      "a/../",      "a/../.",      "a/../..",
        "a/../b",     "a/b/",       "a/b/.",      "a/b/..",      "///",
        "///.",       "///..",      "///a",       "//./",        "//./.",
        "//./..",     "//./a",      "//../",      "//../.",      "//../..",
        "//../a",     "//a/",       "//a/.",      "//a/..",      "/.//",
        "/.//.",      "/.//..",     "/.//a",      "/././",       "/././.",
        "/././..",    "/././a",     "/./../",     "/./../.",     "/./../..",
        "/./../a",    "/./a/",      "/./a/.",     "/./a/..",     "/./a/b",
        "/..//",      "/..//.",     "/..//..",    "/..//a",      "/.././",
        "/.././.",    "/.././..",   "/.././a",    "/../../",     "/../../.",
        "/../../..",  "/../../a",   "/../a/",     "/../a/.",     "/../a/..",
        "/../a/b",    "/a//",       "/a//.",      "/a//..",      "/a//b",
        "/a/./",      "/a/./.",     "/a/./..",    "/a/./b",      "/a/../",
        "/a/../.",    "/a/../..",   "/a/../b",    "/a/b/",       "/a/b/.",
        "/a/b/..",    ".///",       ".///.",      ".///..",      ".///a",
        ".//./",      ".//./.",     ".//./..",    ".//./a",      ".//../",
        ".//../.",    ".//../..",   ".//../a",    ".//a/",       ".//a/.",
        ".//a/..",    ".//a/b",     "././/",      "././/.",      "././/..",
        "././/a",     "./././",     "./././.",    "./././..",    "./././a",
        "././../",    "././../.",   "././../..",  "././../a",    "././a/",
        "././a/.",    "././a/..",   "././a/b",    "./..//",      "./..//.",
        "./..//..",   "./..//a",    "./.././",    "./.././.",    "./.././..",
        "./.././a",   "./../../",   "./../../.",  "./../../..",  "./../../a",
        "./../a/",    "./../a/.",   "./../a/..",  "./../a/b",    "./a//",
        "./a//.",     "./a//..",    "./a//b",     "./a/./",      "./a/./.",
        "./a/./..",   "./a/./b",    "./a/../",    "./a/../.",    "./a/../..",
        "./a/../b",   "./a/b/",     "./a/b/.",    "./a/b/..",    "./a/b/c",
        "..///",      "..///.",     "..///..",    "..///a",      "..//./",
        "..//./.",    "..//./..",   "..//./a",    "..//../",     "..//../.",
        "..//../..",  "..//../a",   "..//a/",     "..//a/.",     "..//a/..",
        "..//a/b",    ".././/",     ".././/.",    ".././/..",    ".././/a",
        "../././",    "../././.",   "../././..",  "../././a",    ".././../",
        ".././../.",  ".././../..", ".././../a",  ".././a/",     ".././a/.",
        ".././a/..",  ".././a/b",   "../..//",    "../..//.",    "../..//..",
        "../..//a",   "../.././",   "../.././.",  "../.././..",  "../.././a",
        "../../../",  "../../../.", "../../a/",   "../../a/.",   "../../a/..",
        "../a//",     "../a//.",    "../a//..",   "../a//b",     "../a/./",
        "../a/./.",   "../a/./..",  "../a/./b",   "../a/../",    "../a/../.",
        "../a/../..", "../a/../b",  "../a/b/",    "../a/b/.",    "../a/b/..",
        "a///",       "a///.",      "a///..",     "a///b",       "a//./",
        "a//./.",     "a//./..",    "a//./b",     "a//../",      "a//../.",
        "a//../..",   "a//../b",    "a//b/",      "a//b/.",      "a//b/..",
        "a//b/c",     "a/.//",      "a/.//.",     "a/.//..",     "a/.//b",
        "a/././",     "a/././.",    "a/././..",   "a/././b",     "a/./../",
        "a/./../.",   "a/./../..",  "a/./../b",   "a/./b/",      "a/./b/.",
        "a/./b/..",   "a/./b/c",    "a/..//",     "a/..//.",     "a/..//..",
        "a/..//b",    "a/.././",    "a/.././.",   "a/.././..",   "a/.././b",
        "a/../../",   "a/../../.",  "a/../../..", "a/../../b",   "a/../b/",
        "a/../b/.",   "a/../b/..",  "a/../b/c",   "a/b//",       "a/b//.",
        "a/b//..",    "a/b//c",     "a/b/./",     "a/b/./.",     "a/b/./..",
        "a/b/./c",    "a/b/../",    "a/b/../.",   "a/b/../..",   "a/b/../c",
        "a/b/c/",     "a/b/c/.",    "a/b/c/..",   "C:/a/b/../c", "a/b/../c.ext",
    };

    for (auto test : true_cases) {
        test = paths::platform_path(test);
        EXPECT_TRUE(paths::normalised(test));
    }

    for (auto test : false_cases) {
        test = paths::platform_path(test);
        EXPECT_FALSE(paths::normalised(test));
    }
}
